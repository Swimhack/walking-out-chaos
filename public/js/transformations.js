/**
 * Walking out Chaos - Transformation Flows JavaScript
 * Generated by Frontend Agent FE-001
 */

class TransformationFlows {
    constructor(app) {
        this.app = app;
        this.currentFlow = null;
        this.currentStep = 0;
        this.flowData = {};
        this.startTime = null;
        this.flowTimer = null;
        
        this.log('Transformation Flows component initialized');
    }
    
    /**
     * Initialize page
     */
    initializePage() {
        this.resetFlow();
        this.setupEventListeners();
    }
    
    /**
     * Setup event listeners
     */
    setupEventListeners() {
        // Add drag and drop for thought sorting
        this.setupDragAndDrop();
        
        // Add keyboard shortcuts
        document.addEventListener('keydown', (e) => this.handleKeyboard(e));
    }
    
    /**
     * Start transformation flow
     */
    startFlow(flowType) {
        this.log(`Starting transformation flow: ${flowType}`);
        
        this.currentFlow = flowType;
        this.currentStep = 0;
        this.flowData = {};
        this.startTime = Date.now();
        
        // Hide transformation cards
        const transformationsGrid = document.querySelector('.transformations-grid');
        if (transformationsGrid) {
            transformationsGrid.style.display = 'none';
        }
        
        // Show flow interface
        this.createFlowInterface(flowType);
        
        // Add activity
        this.app.addActivity(`Started ${this.getFlowDisplayName(flowType)} transformation`);
    }
    
    /**
     * Create flow interface
     */
    createFlowInterface(flowType) {
        const transformationsPage = document.getElementById('transformations');
        if (!transformationsPage) return;
        
        const flowConfig = this.getFlowConfig(flowType);
        
        const flowHtml = `
            <div class="transformation-flow fade-in">
                <div class="flow-header">
                    <h1 class="flow-title">${flowConfig.title}</h1>
                    <p class="flow-description">${flowConfig.description}</p>
                    
                    <div class="flow-progress">
                        ${flowConfig.steps.map((step, index) => `
                            <div class="flow-step ${index === 0 ? 'active' : ''}" data-step="${index}">
                                ${index + 1}
                            </div>
                            ${index < flowConfig.steps.length - 1 ? '<div class="flow-connector"></div>' : ''}
                        `).join('')}
                    </div>
                    
                    <div class="flow-timer">
                        <span id="flowTimer">00:00</span>
                    </div>
                </div>
                
                <div class="flow-content" id="flowContent">
                    <!-- Step content will be populated here -->
                </div>
                
                <div class="flow-navigation">
                    <button id="flowPrevBtn" class="flow-nav-button" onclick="transformationFlows.previousStep()" disabled>
                        ‚Üê Previous
                    </button>
                    
                    <button id="flowExitBtn" class="flow-nav-button" onclick="transformationFlows.exitFlow()">
                        Exit Flow
                    </button>
                    
                    <button id="flowNextBtn" class="flow-nav-button primary" onclick="transformationFlows.nextStep()">
                        Next ‚Üí
                    </button>
                    
                    <button id="flowCompleteBtn" class="flow-nav-button primary" onclick="transformationFlows.completeFlow()" style="display: none;">
                        Complete Flow
                    </button>
                </div>
            </div>
        `;
        
        // Replace page content
        transformationsPage.innerHTML = flowHtml;
        
        // Start timer
        this.startFlowTimer();
        
        // Show first step
        this.showCurrentStep();
    }
    
    /**
     * Get flow configuration
     */
    getFlowConfig(flowType) {
        const configs = {
            'thought-sorting': {
                title: 'Thought Sorting',
                description: 'Organize chaotic thoughts into clear, actionable categories',
                steps: [
                    'Brain Dump',
                    'Categorize',
                    'Prioritize',
                    'Action Plan'
                ]
            },
            'mind-decluttering': {
                title: 'Mind Decluttering',
                description: 'Clear mental clutter and focus on what truly matters',
                steps: [
                    'Mental Inventory',
                    'Release Process',
                    'Focus Selection',
                    'Clarity Confirmation'
                ]
            },
            'priority-pyramid': {
                title: 'Priority Pyramid',
                description: 'Transform overwhelming lists into a clear hierarchy of importance',
                steps: [
                    'List Everything',
                    'Impact Assessment',
                    'Pyramid Building',
                    'Action Sequence'
                ]
            },
            'breathing-bridge': {
                title: 'Breathing Bridge',
                description: 'Use breath work to transition from chaos to calm',
                steps: [
                    'Baseline Assessment',
                    'Breathing Exercise',
                    'Integration',
                    'Calm Confirmation'
                ]
            }
        };
        
        return configs[flowType] || configs['thought-sorting'];
    }
    
    /**
     * Show current step
     */
    showCurrentStep() {
        const flowContent = document.getElementById('flowContent');
        if (!flowContent) return;
        
        const stepContent = this.generateStepContent(this.currentFlow, this.currentStep);
        flowContent.innerHTML = stepContent;
        
        // Update progress indicators
        this.updateFlowProgress();
        
        // Update navigation buttons
        this.updateNavigationButtons();
        
        // Initialize step-specific functionality
        this.initializeStepFunctionality(this.currentFlow, this.currentStep);
    }
    
    /**
     * Generate step content
     */
    generateStepContent(flowType, stepIndex) {
        switch (flowType) {
            case 'thought-sorting':
                return this.generateThoughtSortingStep(stepIndex);
            case 'mind-decluttering':
                return this.generateMindDeclutteringStep(stepIndex);
            case 'priority-pyramid':
                return this.generatePriorityPyramidStep(stepIndex);
            case 'breathing-bridge':
                return this.generateBreathingBridgeStep(stepIndex);
            default:
                return '<div>Unknown flow type</div>';
        }
    }
    
    /**
     * Generate thought sorting step
     */
    generateThoughtSortingStep(stepIndex) {
        switch (stepIndex) {
            case 0: // Brain Dump
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Brain Dump</h2>
                        <p class="step-instruction">
                            Write down everything that's on your mind. Don't worry about organization yet - 
                            just get all your thoughts out of your head and onto paper.
                        </p>
                        
                        <div class="thought-input-area">
                            <textarea id="brainDumpText" 
                                      class="thought-input" 
                                      placeholder="Write everything that's on your mind... worries, tasks, ideas, anything..."
                                      oninput="transformationFlows.updateStepData('brainDump', this.value)"></textarea>
                        </div>
                        
                        <div class="step-tips">
                            <h4>Tips:</h4>
                            <ul>
                                <li>Don't edit yourself - write whatever comes to mind</li>
                                <li>Include tasks, worries, ideas, and random thoughts</li>
                                <li>Aim for at least 5-10 items</li>
                                <li>You can always add more in the next step</li>
                            </ul>
                        </div>
                    </div>
                `;
                
            case 1: // Categorize
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Categorize Your Thoughts</h2>
                        <p class="step-instruction">
                            Now let's organize your thoughts into categories. Drag each thought into the appropriate category.
                        </p>
                        
                        <div class="thought-sorting-container">
                            <div class="thought-items-pool">
                                <h4>Your Thoughts</h4>
                                <div id="thoughtItemsPool" class="thought-items">
                                    <!-- Thoughts will be populated here -->
                                </div>
                            </div>
                            
                            <div class="thought-categories">
                                <div class="thought-category" data-category="urgent">
                                    <div class="category-title">üî• Urgent</div>
                                    <div class="category-description">Needs immediate attention</div>
                                    <div class="category-items" id="urgentItems"></div>
                                </div>
                                
                                <div class="thought-category" data-category="important">
                                    <div class="category-title">‚≠ê Important</div>
                                    <div class="category-description">Significant but not urgent</div>
                                    <div class="category-items" id="importantItems"></div>
                                </div>
                                
                                <div class="thought-category" data-category="someday">
                                    <div class="category-title">üí≠ Someday</div>
                                    <div class="category-description">Nice to have or future ideas</div>
                                    <div class="category-items" id="somedayItems"></div>
                                </div>
                                
                                <div class="thought-category" data-category="discard">
                                    <div class="category-title">üóëÔ∏è Let Go</div>
                                    <div class="category-description">Not worth mental energy</div>
                                    <div class="category-items" id="discardItems"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
            case 2: // Prioritize
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Prioritize Actions</h2>
                        <p class="step-instruction">
                            Focus on your urgent and important items. Put them in order of priority.
                        </p>
                        
                        <div class="priority-sections">
                            <div class="priority-section">
                                <h4>üî• Urgent Items (Do First)</h4>
                                <div id="urgentPriority" class="priority-list sortable">
                                    <!-- Urgent items will be populated here -->
                                </div>
                            </div>
                            
                            <div class="priority-section">
                                <h4>‚≠ê Important Items (Schedule)</h4>
                                <div id="importantPriority" class="priority-list sortable">
                                    <!-- Important items will be populated here -->
                                </div>
                            </div>
                        </div>
                        
                        <div class="priority-instructions">
                            <p>Drag items to reorder them by priority. The most important items should be at the top.</p>
                        </div>
                    </div>
                `;
                
            case 3: // Action Plan
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Create Action Plan</h2>
                        <p class="step-instruction">
                            Now let's create a clear action plan for your top priorities.
                        </p>
                        
                        <div class="action-plan">
                            <div class="action-section">
                                <h4>üéØ Today's Focus (Top 3)</h4>
                                <div id="todayActions" class="action-items">
                                    <!-- Today's actions will be populated here -->
                                </div>
                            </div>
                            
                            <div class="action-section">
                                <h4>üìÖ This Week</h4>
                                <div id="weekActions" class="action-items">
                                    <!-- Week actions will be populated here -->
                                </div>
                            </div>
                            
                            <div class="clarity-score">
                                <h4>Mental Clarity Assessment</h4>
                                <p>How clear and organized do you feel now compared to when you started?</p>
                                <div class="clarity-slider">
                                    <input type="range" id="clarityScore" min="1" max="10" value="5" 
                                           onchange="transformationFlows.updateStepData('finalClarity', this.value)">
                                    <div class="slider-labels">
                                        <span>Much Worse</span>
                                        <span>Same</span>
                                        <span>Much Better</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
            default:
                return '<div>Step not found</div>';
        }
    }
    
    /**
     * Generate mind decluttering step
     */
    generateMindDeclutteringStep(stepIndex) {
        switch (stepIndex) {
            case 0: // Mental Inventory
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Mental Inventory</h2>
                        <p class="step-instruction">
                            Let's take inventory of what's cluttering your mind right now.
                        </p>
                        
                        <div class="inventory-sections">
                            <div class="inventory-item">
                                <label>What's worrying you?</label>
                                <textarea placeholder="List your current worries and anxieties..." 
                                          onchange="transformationFlows.updateStepData('worries', this.value)"></textarea>
                            </div>
                            
                            <div class="inventory-item">
                                <label>What's exciting you?</label>
                                <textarea placeholder="List positive things on your mind..." 
                                          onchange="transformationFlows.updateStepData('excitement', this.value)"></textarea>
                            </div>
                            
                            <div class="inventory-item">
                                <label>What's frustrating you?</label>
                                <textarea placeholder="List sources of frustration..." 
                                          onchange="transformationFlows.updateStepData('frustrations', this.value)"></textarea>
                            </div>
                            
                            <div class="inventory-item">
                                <label>What keeps repeating in your mind?</label>
                                <textarea placeholder="Recurring thoughts or mental loops..." 
                                          onchange="transformationFlows.updateStepData('recurring', this.value)"></textarea>
                            </div>
                        </div>
                    </div>
                `;
                
            case 1: // Release Process
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Release What Doesn't Serve You</h2>
                        <p class="step-instruction">
                            Identify what you can let go of to free up mental space.
                        </p>
                        
                        <div class="release-exercise">
                            <div class="release-categories">
                                <div class="release-category">
                                    <h4>üóëÔ∏è Things to Release</h4>
                                    <p>What can you let go of? What's not worth your mental energy?</p>
                                    <textarea id="releaseItems" 
                                              placeholder="I release my worry about... I let go of..."
                                              onchange="transformationFlows.updateStepData('release', this.value)"></textarea>
                                </div>
                                
                                <div class="release-category">
                                    <h4>üéØ Things to Keep</h4>
                                    <p>What deserves your attention and mental energy?</p>
                                    <textarea id="keepItems" 
                                              placeholder="I choose to focus on... This is worth my energy..."
                                              onchange="transformationFlows.updateStepData('keep', this.value)"></textarea>
                                </div>
                            </div>
                            
                            <div class="release-visualization">
                                <h4>Visualization Exercise</h4>
                                <p>Close your eyes and imagine releasing the mental clutter. Take three deep breaths.</p>
                                <button class="btn btn-primary" onclick="transformationFlows.startVisualization()">
                                    Start Guided Visualization
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
            default:
                return this.generateGenericStep(stepIndex, 'Mind Decluttering');
        }
    }
    
    /**
     * Generate priority pyramid step
     */
    generatePriorityPyramidStep(stepIndex) {
        switch (stepIndex) {
            case 0: // List Everything
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">List Everything</h2>
                        <p class="step-instruction">
                            Write down everything you feel you need to do, want to do, or should do.
                        </p>
                        
                        <div class="list-everything">
                            <textarea id="everythingList" 
                                      class="full-list-input" 
                                      placeholder="List all tasks, goals, projects, responsibilities, dreams, ideas... everything!"
                                      onchange="transformationFlows.updateStepData('everythingList', this.value)"></textarea>
                            
                            <div class="list-tips">
                                <h4>Include:</h4>
                                <ul>
                                    <li>Work tasks and projects</li>
                                    <li>Personal goals and dreams</li>
                                    <li>Daily responsibilities</li>
                                    <li>Things you've been putting off</li>
                                    <li>Ideas you want to explore</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                `;
                
            case 1: // Impact Assessment
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Assess Impact</h2>
                        <p class="step-instruction">
                            Rate each item on its potential impact on your life and goals.
                        </p>
                        
                        <div class="impact-assessment">
                            <div id="itemsToAssess" class="assessment-items">
                                <!-- Items will be populated here -->
                            </div>
                        </div>
                    </div>
                `;
                
            default:
                return this.generateGenericStep(stepIndex, 'Priority Pyramid');
        }
    }
    
    /**
     * Generate breathing bridge step
     */
    generateBreathingBridgeStep(stepIndex) {
        switch (stepIndex) {
            case 0: // Baseline Assessment
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Baseline Assessment</h2>
                        <p class="step-instruction">
                            Let's check your current state before we begin the breathing exercise.
                        </p>
                        
                        <div class="baseline-assessment">
                            <div class="assessment-item">
                                <label>Current Stress Level (1-10)</label>
                                <input type="range" min="1" max="10" value="5" 
                                       onchange="transformationFlows.updateStepData('baselineStress', this.value)">
                                <div class="range-labels">
                                    <span>Very Calm</span>
                                    <span>Moderate</span>
                                    <span>Very Stressed</span>
                                </div>
                            </div>
                            
                            <div class="assessment-item">
                                <label>Mental Clarity (1-10)</label>
                                <input type="range" min="1" max="10" value="5" 
                                       onchange="transformationFlows.updateStepData('baselineClarity', this.value)">
                                <div class="range-labels">
                                    <span>Very Foggy</span>
                                    <span>Moderate</span>
                                    <span>Crystal Clear</span>
                                </div>
                            </div>
                            
                            <div class="assessment-item">
                                <label>Physical Tension (1-10)</label>
                                <input type="range" min="1" max="10" value="5" 
                                       onchange="transformationFlows.updateStepData('baselineTension', this.value)">
                                <div class="range-labels">
                                    <span>Very Relaxed</span>
                                    <span>Moderate</span>
                                    <span>Very Tense</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
            case 1: // Breathing Exercise
                return `
                    <div class="flow-step-content active">
                        <h2 class="step-title">Breathing Exercise</h2>
                        <p class="step-instruction">
                            Follow the breathing guide. Breathe in as the circle expands, breathe out as it contracts.
                        </p>
                        
                        <div class="breathing-exercise">
                            <div class="breathing-circle" id="breathingCircle">
                                <span id="breathingText">Ready</span>
                            </div>
                            
                            <div class="breathing-counter">
                                <span id="breathingCounter">0</span>
                                <span class="counter-label">breaths</span>
                            </div>
                            
                            <div class="breathing-instruction" id="breathingInstruction">
                                Click Start to begin the breathing exercise
                            </div>
                            
                            <div class="breathing-controls">
                                <button id="startBreathingBtn" class="btn btn-primary" 
                                        onclick="transformationFlows.startBreathingExercise()">
                                    Start Exercise
                                </button>
                                <button id="stopBreathingBtn" class="btn btn-secondary" 
                                        onclick="transformationFlows.stopBreathingExercise()" style="display: none;">
                                    Stop Exercise
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
            default:
                return this.generateGenericStep(stepIndex, 'Breathing Bridge');
        }
    }
    
    /**
     * Generate generic step for unconfigured steps
     */
    generateGenericStep(stepIndex, flowName) {
        return `
            <div class="flow-step-content active">
                <h2 class="step-title">Step ${stepIndex + 1}</h2>
                <p class="step-instruction">
                    Continue with your ${flowName} transformation.
                </p>
                
                <div class="generic-step">
                    <p>This step is being developed. Please continue to the next step or complete the flow.</p>
                </div>
            </div>
        `;
    }
    
    /**
     * Initialize step-specific functionality
     */
    initializeStepFunctionality(flowType, stepIndex) {
        switch (flowType) {
            case 'thought-sorting':
                if (stepIndex === 1) {
                    this.populateThoughtItems();
                } else if (stepIndex === 2) {
                    this.populatePriorityItems();
                } else if (stepIndex === 3) {
                    this.generateActionPlan();
                }
                break;
                
            case 'priority-pyramid':
                if (stepIndex === 1) {
                    this.populateImpactAssessment();
                }
                break;
        }
    }
    
    /**
     * Populate thought items for categorization
     */
    populateThoughtItems() {
        const brainDumpText = this.flowData.brainDump || '';
        const thoughts = brainDumpText.split('\n').filter(thought => thought.trim().length > 0);
        
        const thoughtItemsPool = document.getElementById('thoughtItemsPool');
        if (!thoughtItemsPool) return;
        
        thoughtItemsPool.innerHTML = thoughts.map((thought, index) => `
            <div class="thought-item" draggable="true" data-thought-id="${index}" data-thought="${thought}">
                ${thought.trim()}
            </div>
        `).join('');
        
        // Setup drag and drop
        this.setupDragAndDrop();
    }
    
    /**
     * Setup drag and drop functionality
     */
    setupDragAndDrop() {
        // Make thought items draggable
        document.querySelectorAll('.thought-item').forEach(item => {
            item.addEventListener('dragstart', this.handleDragStart.bind(this));
            item.addEventListener('dragend', this.handleDragEnd.bind(this));
        });
        
        // Make categories drop zones
        document.querySelectorAll('.thought-category').forEach(category => {
            category.addEventListener('dragover', this.handleDragOver.bind(this));
            category.addEventListener('drop', this.handleDrop.bind(this));
            category.addEventListener('dragleave', this.handleDragLeave.bind(this));
        });
    }
    
    /**
     * Handle drag start
     */
    handleDragStart(e) {
        e.dataTransfer.setData('text/plain', e.target.dataset.thoughtId);
        e.target.classList.add('dragging');
    }
    
    /**
     * Handle drag end
     */
    handleDragEnd(e) {
        e.target.classList.remove('dragging');
    }
    
    /**
     * Handle drag over
     */
    handleDragOver(e) {
        e.preventDefault();
        e.currentTarget.classList.add('drag-over');
    }
    
    /**
     * Handle drag leave
     */
    handleDragLeave(e) {
        e.currentTarget.classList.remove('drag-over');
    }
    
    /**
     * Handle drop
     */
    handleDrop(e) {
        e.preventDefault();
        e.currentTarget.classList.remove('drag-over');
        
        const thoughtId = e.dataTransfer.getData('text/plain');
        const thoughtElement = document.querySelector(`[data-thought-id="${thoughtId}"]`);
        const category = e.currentTarget.dataset.category;
        
        if (thoughtElement && category) {
            const categoryItems = e.currentTarget.querySelector('.category-items');
            if (categoryItems) {
                categoryItems.appendChild(thoughtElement);
                this.updateStepData('categorizedThoughts', this.getCategorizedThoughts());
            }
        }
    }
    
    /**
     * Get categorized thoughts
     */
    getCategorizedThoughts() {
        const categories = ['urgent', 'important', 'someday', 'discard'];
        const categorized = {};
        
        categories.forEach(category => {
            const categoryItems = document.getElementById(`${category}Items`);
            if (categoryItems) {
                categorized[category] = Array.from(categoryItems.querySelectorAll('.thought-item'))
                    .map(item => item.dataset.thought);
            }
        });
        
        return categorized;
    }
    
    /**
     * Start breathing exercise
     */
    startBreathingExercise() {
        const circle = document.getElementById('breathingCircle');
        const text = document.getElementById('breathingText');
        const instruction = document.getElementById('breathingInstruction');
        const counter = document.getElementById('breathingCounter');
        const startBtn = document.getElementById('startBreathingBtn');
        const stopBtn = document.getElementById('stopBreathingBtn');
        
        if (!circle || !text || !instruction) return;
        
        let breathCount = 0;
        let isInhaling = true;
        
        startBtn.style.display = 'none';
        stopBtn.style.display = 'inline-block';
        
        this.breathingInterval = setInterval(() => {
            if (isInhaling) {
                circle.classList.add('inhale');
                circle.classList.remove('exhale');
                text.textContent = 'Breathe In';
                instruction.textContent = 'Slowly breathe in through your nose...';
            } else {
                circle.classList.add('exhale');
                circle.classList.remove('inhale');
                text.textContent = 'Breathe Out';
                instruction.textContent = 'Slowly breathe out through your mouth...';
                breathCount++;
                counter.textContent = breathCount;
            }
            
            isInhaling = !isInhaling;
        }, 4000); // 4 seconds inhale, 4 seconds exhale
        
        this.updateStepData('breathingStarted', true);
    }
    
    /**
     * Stop breathing exercise
     */
    stopBreathingExercise() {
        if (this.breathingInterval) {
            clearInterval(this.breathingInterval);
            this.breathingInterval = null;
        }
        
        const circle = document.getElementById('breathingCircle');
        const text = document.getElementById('breathingText');
        const instruction = document.getElementById('breathingInstruction');
        const startBtn = document.getElementById('startBreathingBtn');
        const stopBtn = document.getElementById('stopBreathingBtn');
        
        if (circle) {
            circle.classList.remove('inhale', 'exhale');
        }
        
        if (text) text.textContent = 'Complete';
        if (instruction) instruction.textContent = 'Great job! Take a moment to notice how you feel.';
        
        startBtn.style.display = 'inline-block';
        stopBtn.style.display = 'none';
        
        this.updateStepData('breathingCompleted', true);
    }
    
    /**
     * Start flow timer
     */
    startFlowTimer() {
        const timerElement = document.getElementById('flowTimer');
        if (!timerElement) return;
        
        this.flowTimer = setInterval(() => {
            const elapsed = Date.now() - this.startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
    }
    
    /**
     * Update step data
     */
    updateStepData(key, value) {
        this.flowData[key] = value;
        this.log(`Updated step data: ${key}`, value);
    }
    
    /**
     * Update flow progress
     */
    updateFlowProgress() {
        const steps = document.querySelectorAll('.flow-step');
        const connectors = document.querySelectorAll('.flow-connector');
        
        steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');
            
            if (index < this.currentStep) {
                step.classList.add('completed');
            } else if (index === this.currentStep) {
                step.classList.add('active');
            }
        });
        
        connectors.forEach((connector, index) => {
            connector.classList.remove('completed');
            
            if (index < this.currentStep) {
                connector.classList.add('completed');
            }
        });
    }
    
    /**
     * Update navigation buttons
     */
    updateNavigationButtons() {
        const prevBtn = document.getElementById('flowPrevBtn');
        const nextBtn = document.getElementById('flowNextBtn');
        const completeBtn = document.getElementById('flowCompleteBtn');
        
        if (!prevBtn || !nextBtn || !completeBtn) return;
        
        // Previous button
        prevBtn.disabled = this.currentStep === 0;
        
        // Next/Complete button
        const flowConfig = this.getFlowConfig(this.currentFlow);
        const isLastStep = this.currentStep === flowConfig.steps.length - 1;
        
        if (isLastStep) {
            nextBtn.style.display = 'none';
            completeBtn.style.display = 'inline-block';
        } else {
            nextBtn.style.display = 'inline-block';
            completeBtn.style.display = 'none';
        }
    }
    
    /**
     * Go to previous step
     */
    previousStep() {
        if (this.currentStep > 0) {
            this.currentStep--;
            this.showCurrentStep();
        }
    }
    
    /**
     * Go to next step
     */
    nextStep() {
        const flowConfig = this.getFlowConfig(this.currentFlow);
        
        if (this.currentStep < flowConfig.steps.length - 1) {
            this.currentStep++;
            this.showCurrentStep();
        }
    }
    
    /**
     * Complete flow
     */
    completeFlow() {
        const endTime = Date.now();
        const duration = endTime - this.startTime;
        
        // Stop timer
        if (this.flowTimer) {
            clearInterval(this.flowTimer);
            this.flowTimer = null;
        }
        
        // Calculate improvement
        const improvement = this.calculateImprovement();
        
        // Save flow data
        this.saveFlowData(duration, improvement);
        
        // Show completion screen
        this.showCompletionScreen(improvement);
        
        // Add activity
        this.app.addActivity(`Completed ${this.getFlowDisplayName(this.currentFlow)} transformation`);
        
        this.log('Flow completed', {
            flow: this.currentFlow,
            duration: duration,
            improvement: improvement,
            data: this.flowData
        });
    }
    
    /**
     * Calculate improvement
     */
    calculateImprovement() {
        // This is a simplified calculation - in a real app, this would be more sophisticated
        const baseline = this.flowData.baselineStress || 5;
        const final = this.flowData.finalClarity || 7;
        
        return {
            stress_reduction: Math.max(0, baseline - final),
            clarity_improvement: Math.max(0, final - baseline),
            overall_improvement: final > baseline ? 'improved' : 'maintained'
        };
    }
    
    /**
     * Save flow data
     */
    saveFlowData(duration, improvement) {
        try {
            const flows = JSON.parse(localStorage.getItem('wooc_transformation_flows') || '[]');
            
            flows.push({
                flow_type: this.currentFlow,
                duration: duration,
                improvement: improvement,
                flow_data: this.flowData,
                timestamp: Date.now()
            });
            
            // Keep only last 50 flows
            if (flows.length > 50) {
                flows.splice(0, flows.length - 50);
            }
            
            localStorage.setItem('wooc_transformation_flows', JSON.stringify(flows));
        } catch (error) {
            this.log('Error saving flow data', error);
        }
    }
    
    /**
     * Show completion screen
     */
    showCompletionScreen(improvement) {
        const transformationsPage = document.getElementById('transformations');
        if (!transformationsPage) return;
        
        const completionHtml = `
            <div class="flow-completion fade-in">
                <div class="completion-header">
                    <h1>üéâ Transformation Complete!</h1>
                    <h2>${this.getFlowDisplayName(this.currentFlow)}</h2>
                </div>
                
                <div class="completion-stats">
                    <div class="stat-card">
                        <div class="stat-value">${this.formatDuration(Date.now() - this.startTime)}</div>
                        <div class="stat-label">Time Invested</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-value">${improvement.overall_improvement}</div>
                        <div class="stat-label">Overall Result</div>
                    </div>
                    
                    <div class="stat-card">
                        <div class="stat-value">+${improvement.clarity_improvement || 0}</div>
                        <div class="stat-label">Clarity Boost</div>
                    </div>
                </div>
                
                <div class="completion-insights">
                    <h3>Key Insights</h3>
                    <div class="insights-list">
                        ${this.generateCompletionInsights().map(insight => `
                            <div class="insight-item">
                                <span class="insight-icon">üí°</span>
                                <span class="insight-text">${insight}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="completion-actions">
                    <button class="btn btn-primary" onclick="transformationFlows.startAnotherFlow()">
                        Start Another Flow
                    </button>
                    <button class="btn btn-secondary" onclick="woocApp.navigateTo('progress')">
                        View Progress
                    </button>
                    <button class="btn btn-secondary" onclick="woocApp.navigateTo('dashboard')">
                        Back to Dashboard
                    </button>
                </div>
            </div>
        `;
        
        transformationsPage.innerHTML = completionHtml;
    }
    
    /**
     * Generate completion insights
     */
    generateCompletionInsights() {
        const insights = [];
        
        switch (this.currentFlow) {
            case 'thought-sorting':
                insights.push('You successfully organized chaotic thoughts into clear categories');
                insights.push('Your mind now has a clearer structure for decision-making');
                break;
            case 'mind-decluttering':
                insights.push('You identified and released mental clutter that was weighing you down');
                insights.push('Your mental space is now clearer and more focused');
                break;
            case 'priority-pyramid':
                insights.push('You transformed overwhelming lists into a clear hierarchy');
                insights.push('Your priorities are now organized and actionable');
                break;
            case 'breathing-bridge':
                insights.push('You used breath work to transition from chaos to calm');
                insights.push('Your nervous system is now more regulated and peaceful');
                break;
        }
        
        insights.push('Regular practice will strengthen these mental organization skills');
        
        return insights;
    }
    
    /**
     * Start another flow
     */
    startAnotherFlow() {
        this.resetFlow();
        this.app.navigateTo('transformations');
    }
    
    /**
     * Exit flow
     */
    exitFlow() {
        if (confirm('Are you sure you want to exit this transformation flow? Your progress will be saved.')) {
            this.resetFlow();
            this.app.navigateTo('transformations');
        }
    }
    
    /**
     * Reset flow
     */
    resetFlow() {
        this.currentFlow = null;
        this.currentStep = 0;
        this.flowData = {};
        this.startTime = null;
        
        if (this.flowTimer) {
            clearInterval(this.flowTimer);
            this.flowTimer = null;
        }
        
        if (this.breathingInterval) {
            clearInterval(this.breathingInterval);
            this.breathingInterval = null;
        }
        
        // Restore original page content
        this.restoreTransformationsPage();
    }
    
    /**
     * Restore transformations page
     */
    restoreTransformationsPage() {
        const transformationsPage = document.getElementById('transformations');
        if (!transformationsPage) return;
        
        const originalHtml = `
            <h2>Transformation Flows</h2>
            <div class="transformations-grid">
                <div class="transformation-card" data-flow="thought-sorting">
                    <h3>Thought Sorting</h3>
                    <p>Organize chaotic thoughts into clear categories</p>
                    <button class="btn btn-primary" onclick="transformationFlows.startFlow('thought-sorting')">
                        Start Flow
                    </button>
                </div>
                
                <div class="transformation-card" data-flow="mind-decluttering">
                    <h3>Mind Decluttering</h3>
                    <p>Clear mental clutter and focus on what matters</p>
                    <button class="btn btn-primary" onclick="transformationFlows.startFlow('mind-decluttering')">
                        Start Flow
                    </button>
                </div>
                
                <div class="transformation-card" data-flow="priority-pyramid">
                    <h3>Priority Pyramid</h3>
                    <p>Transform overwhelming lists into clear priorities</p>
                    <button class="btn btn-primary" onclick="transformationFlows.startFlow('priority-pyramid')">
                        Start Flow
                    </button>
                </div>
                
                <div class="transformation-card" data-flow="breathing-bridge">
                    <h3>Breathing Bridge</h3>
                    <p>Physiological transition from chaos to calm</p>
                    <button class="btn btn-primary" onclick="transformationFlows.startFlow('breathing-bridge')">
                        Start Flow
                    </button>
                </div>
            </div>
        `;
        
        transformationsPage.innerHTML = originalHtml;
    }
    
    /**
     * Handle keyboard shortcuts
     */
    handleKeyboard(e) {
        if (!this.currentFlow) return;
        
        switch (e.key) {
            case 'ArrowLeft':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    this.previousStep();
                }
                break;
            case 'ArrowRight':
                if (e.ctrlKey || e.metaKey) {
                    e.preventDefault();
                    this.nextStep();
                }
                break;
            case 'Escape':
                e.preventDefault();
                this.exitFlow();
                break;
        }
    }
    
    /**
     * Get flow display name
     */
    getFlowDisplayName(flowType) {
        const names = {
            'thought-sorting': 'Thought Sorting',
            'mind-decluttering': 'Mind Decluttering',
            'priority-pyramid': 'Priority Pyramid',
            'breathing-bridge': 'Breathing Bridge'
        };
        
        return names[flowType] || flowType;
    }
    
    /**
     * Format duration
     */
    formatDuration(ms) {
        const minutes = Math.floor(ms / 60000);
        const seconds = Math.floor((ms % 60000) / 1000);
        
        if (minutes > 0) {
            return `${minutes}m ${seconds}s`;
        } else {
            return `${seconds}s`;
        }
    }
    
    /**
     * Log events
     */
    log(message, data = null) {
        const timestamp = new Date().toISOString();
        console.log(`[TransformationFlows] [${timestamp}] ${message}`, data);
    }
}

// Global functions for inline handlers
window.transformationFlows = null;

// Initialize when app is ready
document.addEventListener('DOMContentLoaded', () => {
    if (window.woocApp) {
        window.transformationFlows = new TransformationFlows(window.woocApp);
    }
});